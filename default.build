<?xml version="1.0"?>
<project name="NAnt Examples" default="rebuild">

	<property name="root.folder" value="${directory::get-current-directory()}" />
	<property name="build.folder" value="${root.folder}/build" />
	<property name="solution.folder" value="${root.folder}/main" />
	<property name="tools.folder" value="${root.folder}/tools" />
	<property name="schema.folder" value="${solution.folder}/schema" />
	<property name="program.files.x86" value="${environment::get-variable('ProgramFiles(x86)')}" if="${environment::variable-exists('ProgramFiles(x86)')}"/>
	<property name="program.files.x86" value="${environment::get-variable('ProgramFiles')}" unless="${property::exists('program.files.x86')}" />
	<property name="program.files" value="${environment::get-variable('ProgramFiles')}" />
	<property name="netfx.tools.folder" value="${program.files.x86}/Microsoft SDKs\Windows\v8.0A\Bin\NETFX 4.0 Tools" />
	<property name="netfx.folder" value="${environment::get-variable('SystemRoot')}/Microsoft.NET" />
	<property name="netfx.framework.folder" value="${netfx.folder}/Framework" if="${directory::exists(netfx.folder + '/Framework')}" />
	<property name="netfx.framework.folder" value="${netfx.folder}/Framework64" if="${directory::exists(netfx.folder + '/Framework64')}" />
	<property name="netfx4.folder" value="${netfx.framework.folder}/v4.0.30319" />
	<property name="bamboo.buildNumber" value="${environment::get-variable('bamboo_buildNumber')}" if="${environment::variable-exists('bamboo_buildNumber')}"/>
	
	<loadtasks assembly="${build.folder}/nantcontrib-0.85/bin/NAnt.Contrib.Tasks.dll" />

	<include buildfile="${build.folder}/version.build" />
	<include buildfile="${build.folder}/opencover.build" />
	<include buildfile="${build.folder}/environment.build" />
	<include buildfile="${build.folder}/installer.build" />
	<include buildfile="${build.folder}/nuget_package.build" />
	<include buildfile="${build.folder}/metrics.build" />

	<target name="build-environment" depends="get-os-version, create-snk, prepare-environment, get-version-number, generate-release-notes, prepare-sample-project" />

	<target name="rebuild" depends="build-environment, clean, build, test" >
		<call target="test-cpp" if="${version::get-major(version::parse(machine.version))==6}" />
	</target>

	<target name="teamcity-build" depends="build-environment, clean" >
		<echo>##teamcity[buildNumber '${buildnumber.version}']</echo>
		<call target="build-all-platforms" />
	</target>
	
  <target name="copy-artefacts" >
    <move file="${solution.folder}/OpenCover.Installer/bin/Release/opencover.installer.msi" 
        tofile="${solution.folder}/bin/installer/opencover.${buildnumber.major}.${buildnumber.minor}.${buildnumber.build}.msi" />
    <move file="${solution.folder}/bin/zip/opencover.zip" 
        tofile="${solution.folder}/bin/zip/opencover.${buildnumber.major}.${buildnumber.minor}.${buildnumber.build}.zip" />
  </target>
  
	<target name="create-release" depends="build-environment, build-release-platforms, test, test-cpp, nuget-package, create-zip-package">
		<call target="copy-artefacts" />
		<call target="test-bdd" />
	</target>
  
  <target name="set-rc-property" >
  
    <property name="buildnumber.rc" value="-rc${bamboo.buildNumber}" if="${property::exists('bamboo.buildNumber')}" />
    <property name="buildnumber.rc" value="-rc${buildnumber.revision}" unless="${property::exists('buildnumber.rc')}" />
  </target>
  
  <target name="create-release-candidate" depends="build-environment, build-release-platforms, test, test-cpp, set-rc-property, nuget-package, create-zip-package">
		<call target="copy-artefacts" />
		<call target="test-bdd" />
	</target>
	
  <target name="generate-release-notes" depends="get-version-number" >
    <delete file="ReleaseNotes.txt" />
    <copy file="ReleaseNotes.tmp" tofile="ReleaseNotes.txt" >
      <filterchain>
        <replacestring from="[[version]]" to="${buildnumber.major}.${buildnumber.minor}.${buildnumber.build}" />
      </filterchain>
    </copy>
	</target>

  <target name="prepare-sample-project" depends="get-version-number" >
    <delete file="samples\SampleSln\coverage.bat" />
    <copy file="samples\SampleSln\coverage.bat.tmp" tofile="samples\SampleSln\coverage.bat" >
      <filterchain>
        <replacestring from="[[version]]" to="${buildnumber.major}.${buildnumber.minor}.${buildnumber.build}" />
      </filterchain>
    </copy>
    <delete file="samples\SampleSln\.nuget\packages.config" />
    <copy file="samples\SampleSln\.nuget\packages.config.tmp" tofile="samples\SampleSln\.nuget\packages.config" >
      <filterchain>
        <replacestring from="[[version]]" to="${buildnumber.major}.${buildnumber.minor}.${buildnumber.build}" />
      </filterchain>
    </copy>
    <delete file="samples\SampleSln\nuget\packages.config" />
    <copy file="samples\SampleSln\.nuget\packages.config.tmp" tofile="samples\SampleSln\nuget\packages.config" >
      <filterchain>
        <replacestring from="[[version]]" to="${buildnumber.major}.${buildnumber.minor}.${buildnumber.build}" />
      </filterchain>
    </copy>
    </target>
	
</project>